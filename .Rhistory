melt(activity)
pivot<-cast(activity, date ~ interval)
meltedActivity<-melt(activity)
pivot<-cast(meltedActivity, date ~ interval)
head(meltedActivity)
summary(meltedActivity)
pivot<-cast(meltedActivity, variable ~ interval)
pivot<-cast(meltedActivity, variable ~ date)
meltedActivity<-melt(activity,id=c(date,interval))
head(activity)
meltedActivity<-melt(activity,id=c("date","interval"))
head(meldetdActivity)
head(meldeddActivity)
head(meltedActivity)
pivot<-cast(meltedActivity, date ~ interval)
head(pivot)
summary(pivot)
activityNew <- merge(activity, stepsPerInterval, by = "interval"))
activityNew <- merge(activity, stepsPerInterval, by = "interval")
head(activityNew)
nas <- is.na(activity$steps)
activityNew$steps[nas] <- activity$steps.y[nas]
activity <- activity[, c(1:3)]
activityNew$steps[nas] <- activityNew$steps.y[nas]
summary(activityNew) <- activityNew[, c(1:3)]
activityNew <- activityNew[, c(1:3)]
activityNew$steps[nas] <- activityNew$steps.y[nas]
activityNew <- activityNew[, c(1:3)]
activityNew$steps[nas] <- activityNew$steps.y[nas]
activityNew$steps.x[nas] <- activityNew$steps.y[nas]
activityNew <- activityNew[, c(1:3)]
activityNew <- merge(activity, stepsPerInterval, by = "interval")
nas <- is.na(activity$steps)
activityNew$steps.x[nas] <- activityNew$steps.y[nas]
activityNew <- activityNew[, c(1:3)]
summary(activityNew)
summary(activity)
head(activity) <- merge(activity, stepsPerInterval, by = "interval", suffixes = c("", ".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[, c(1:3)]
activity<-read.csv("activity.csv")
head(activity)
head(activity) <- merge(activity, stepsPerInterval, by = "interval", suffixes = c("", ".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[, c(1:3)]
activity <- merge(activity, stepsPerInterval, by = "interval", suffixes = c("", ".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[, c(1:3)]
summary(activity)
activity<-read.csv("activity.csv")
head(activity)
activityNew <- merge(activity, stepsPerInterval, by = "interval")
nas <- is.na(activity$steps)
activityNew$steps.x[nas] <- activityNew$steps.y[nas]
activityNew <- activityNew[, c(1:3)]
summary(activityNew)
``` {r NA, echo=TRUE}
activity <- merge(activity, stepsPerInterval, by = "interval")
nas <- is.na(activity$steps)
activity$steps.x[nas] <- activity$steps.y[nas]
activity <- activity[, c(1:3)]
summary(activity)
activity <- merge(activity, stepsPerInterval, by = "interval")
summary(activity)
activity<-read.csv("activity.csv")
activity$date<-as.Date(activity$date)
stepsPerInterval<-aggregate(steps~interval,data=activity,FUN=mean)
summary(stepsPerInterval)
activity <- merge(activity, stepsPerInterval, by = "interval")
nas <- is.na(activity$steps.x)
activity$steps.x[nas] <- activity$steps[nas]
activity <- activity[, c(1:3)]
summary(activity)
activity<-read.csv("activity.csv")
head(activity)
summary(activity)
str(activity)
#recalculate date as date
activity$date<-as.Date(activity$date)
summary(activity)
activity <- merge(activity, stepsPerInterval, by = "interval")
summary(activity)
nas <- is.na(activity$steps.x)
activity$steps.x[nas] <- activity$steps.y[nas]
summary(activity)
activity <- activity[, c(1:3)]
summary(activity)
#Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
stepsPerDayMV<-aggregate(steps~date,data=activityMV,FUN=sum)
summary(stepsPerDayMV)
activityMV
# the averages of the intervals calculated for the previous question do replace the missing values
activityMV <- merge(activity, stepsPerInterval, by = "interval")
mv <- is.na(activityMV$steps.x)
activityMV$steps.x[mv] <- activityMV$steps.y[mv]
#Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityMV <- activityMV[, c(1:3)]
stepsPerDayMV<-aggregate(steps~date,data=activityMV,FUN=sum)
summary(stepsPerDayMV)
summary(activityMV)
stepsPerDayMV<-aggregate(steps.x~date,data=activityMV,FUN=sum)
plot3<-ggplot(stepsPerDayMV, aes(x=steps.x))+geom_histogram(binwidth=100,fill="cornsilk",color="black")
#set the axis labels
plot1+xlab("steps per day")+ylab("no. of days")
stepsPerDayMV["Set"]<-"new"
head(stepsPerDayMV)
stepsPerDay["Set"]<-"original"
head(stepsPerDay)
stepsPerDayMerged <- merge(stepsPerDay, stepsPerDayMV, by = "date")
head(stepsPerDayMerged)
summary(stepsPerDayMerged)
#Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
stepsPerDayMV<-aggregate(steps.x~date,data=activityMV,FUN=sum)
plot3<-ggplot(stepsPerDayMV, aes(x=steps.x))+geom_histogram(binwidth=100,fill="cornsilk",color="black")
#set the axis labels
plot3+xlab("steps per day")+ylab("no. of days")
#Calculate and report the mean and median total number of steps taken per day
meanStepsMV<-mean(stepsPerDayMV$steps.x)
medianStepsMV<-median(stepsPerDayMV$steps.x)
meanStepsMV
meanSteps
medianStepsMV
medianSteps
meanDiff<-meanStepsMV-meanSteps
medianDiff<-medianStepsMV-medianSteps
stepsPerDay$weekday<-weekdays(stepsPerDay$date)
summary(stepsPerDay)
head(stepsPerDay)
stepsPerDay$weekday<-weekdays(stepsPerDay$date)
weekend<-c("Samstag","Sonntag")
weekday<-c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag")
stepsPerDayWeekend<-stepsPerDay[weekend]
stepsPerDayWeekday<-stepsPerDay[weekday]
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay==weekend,]
weekday<-c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag")
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay==weekend),]
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay=="Samstag"|"Sonnatg"),]
head(stepsPerDay)
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay$weekday=="Samstag"|"Sonnatg"),]
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay$weekday==weekend),]
head(stepsPerDayWeekend)
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay$weekday==weekday),]
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay$weekday==weekend),]
stepsPerDayWeekday<-stepsPerDay[which(stepsPerDay$weekday==weekday),]
par(mfrow = c(2, 1))
ggplot(stepsPerDayWeekend,aes(x=date,y=steps))+geom_line()
ggplot(stepsPerDayWeekday,aes(x=date,y=steps))+geom_line()
plotWeekend<-ggplot(stepsPerDayWeekend,aes(x=date,y=steps))+geom_line()
plotWeekday<-ggplot(stepsPerDayWeekday,aes(x=date,y=steps))+geom_line()
multiplot(plotWeekend,plotWeekday, cols=1)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(plotWeekend,plotWeekday, cols=1)
stepsPerInterval$weekday<-weekdays(stepsPerDay$date)
weekend<-c("Samstag","Sonntag")
weekday<-c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag")
stepsPerDayWeekend<-stepsPerDay[which(stepsPerDay$weekday==weekend),]
stepsPerDayWeekday<-stepsPerDay[which(stepsPerDay$weekday==weekday),]
plotWeekend<-ggplot(stepsPerDayWeekend,aes(x=date,y=steps))+geom_line()
plotWeekday<-ggplot(stepsPerDayWeekday,aes(x=date,y=steps))+geom_line()
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(plotWeekend,plotWeekday, cols=1)
stepsPerInterval$weekday<-weekdays(stepsPerInterval$date)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
### Loading and preprocessing the data
``` {r preprocessing,echo=TRUE,results="hide" }
library(ggplot2)
#setwd("RDokumente/RepData_PeerAssessment1")
#read in data and get a first overview
activity<-read.csv("activity.csv")
head(activity)
summary(activity)
str(activity)
#recalculate date as date
activity$date<-as.Date(activity$date)
#aggregate steps per interval for average daily activity pattern
stepsPerInterval<-aggregate(steps~interval,data=activity,FUN=mean)
summary(stepsPerInterval)
#aggregate steps per interval for total number of steps taken
stepsPerDay<-aggregate(steps~date,data=activity,FUN=sum)
```
### What is mean total number of steps taken per day?
```{r mean,echo=TRUE}
#Make a histogram of the total number of steps taken each day
plot1<-ggplot(stepsPerDay, aes(x=steps))+geom_histogram(binwidth=100,fill="cornsilk",color="black")
#set the axis labels
plot1+xlab("steps per day")+ylab("no. of days")
#Calculate and report the mean and median total number of steps taken per day
meanSteps<-mean(stepsPerDay$steps)
medianSteps<-median(stepsPerDay$steps)
```
The mean of total number of steps taken per day is `r meanSteps`; the median is `r medianSteps`.
### What is the average daily activity pattern?
``` {r average, echo=TRUE}
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
plot2<-ggplot(stepsPerInterval, aes(x=interval,y=steps))+geom_line()
plot2+ylab("average steps during interval")
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
maxInterval<-stepsPerInterval$interval[which.max(stepsPerInterval$steps)]
maxSteps<-stepsPerInterval$steps[which.max(stepsPerInterval$steps)]
```
The 5-minute interval `r maxInterval` contains `r maxSteps` steps on average across all the days in the dataset, which is the maximum number of steps.
### Imputing missing values
``` {r NA, echo=TRUE}
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sumNAs<-sum(is.na(activity))
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# the averages of the intervals calculated for the previous question do replace the missing values
activityMV <- merge(activity, stepsPerInterval, by = "interval")
mv <- is.na(activityMV$steps.x)
activityMV$steps.x[mv] <- activityMV$steps.y[mv]
#Create a new dataset that is equal to the original dataset but with the missing data filled in.
activityMV <- activityMV[, c(1:3)]
#Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
stepsPerDayMV<-aggregate(steps.x~date,data=activityMV,FUN=sum)
plot3<-ggplot(stepsPerDayMV, aes(x=steps.x))+geom_histogram(binwidth=100,fill="cornsilk",color="black")
#set the axis labels
plot3+xlab("steps per day")+ylab("no. of days")
#Calculate and report the mean and median total number of steps taken per day
meanStepsMV<-mean(stepsPerDayMV$steps.x)
medianStepsMV<-median(stepsPerDayMV$steps.x)
meanDiff<-meanStepsMV-meanSteps
medianDiff<-medianStepsMV-medianSteps
```
There are `r sumNAs` missing values in the dataset.
The mean of total number of steps taken per day is `r meanStepsMV` (`r meanSteps` with missing values); the median is `r medianStepsMV` (`r medianSteps` with missing values).
The impact of imputing missing data on the estimates of the total daily number of steps is `r meanDiff` steps for the mean and `r medianDiff` steps for the median.
### Are there differences in activity patterns between weekdays and weekends?
stepsPerInterval$weekday<-weekdays(stepsPerInterval$date)
stepsPerInterval$weekday<-weekdays(stepsPerInterval$date)
head(stepsPerInterval)
activity$weekday<-weekdays(activity$date)
head(activity)
weekend<-c("Samstag","Sonntag")
weekday<-c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag")
activityWeekend<-activity[which(activity$weekday==weekend),]
activityWeekday<-activity[which(activity$weekday==weekday),]
head(activityWeekend)
head(activityWeekday)
stepsPerIntervalWeekend<-aggregate(steps~interval,data=activityWeekend,FUN=mean)
summary(stepsPerInterval)
stepsPerIntervalWeekday<-aggregate(steps~interval,data=activityWeekday,FUN=mean)
summary(stepsPerIntervalWeekday)
plotWeekend<-ggplot(stepsPerIntervalWeekend,aes(x=date,y=steps))+geom_line()
plotWeekday<-ggplot(stepsPerIntervalWeekday,aes(x=date,y=steps))+geom_line()
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(plotWeekend,plotWeekday, cols=1)
head(stepsPerDayWeekend)
summary(stepsPerIntervalWeekday)
plotWeekend<-ggplot(stepsPerIntervalWeekend,aes(x=interval,y=steps))+geom_line()
plotWeekday<-ggplot(stepsPerIntervalWeekday,aes(x=interval,y=steps))+geom_line()
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(plotWeekend,plotWeekday, cols=1)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
libraray('ggplot2')
library('ggplot2')
?multiplot
activity$weekdays<-if (weekdays(activity$date) %in% c("Samstag","Sonntag")){"weekend"} else{"weekday"}
weektype<-function(date){
if (weekdays(activity$date) %in% c("Samstag","Sonntag")) {
"weekend"}
else{"weekday"}
}
activity$weekdays<-as.factor(sapply(activity$date,weektype))
plotWeekend<-ggplot(stepsPerIntervalWeekend,aes(x=interval,y=steps))+geom_line()
+xlab("steps per day on weekends")
plotWeekday<-ggplot(stepsPerIntervalWeekday,aes(x=interval,y=steps))+geom_line()
+xlab("steps per day during the week")
# Multiple plot function
#######################################################################################
#derived from: http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/#
#######################################################################################
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
###########################################################################################################
multiplot(plotWeekend,plotWeekday, cols=1)
plotWeekend<-ggplot(stepsPerIntervalWeekend,aes(x=interval,y=steps))+geom_line()+xlab("steps per day on weekends")
plotWeekend<-ggplot(stepsPerIntervalWeekend,aes(x=interval,y=steps))+geom_line()+xlab("steps per day on weekends")
plotWeekday<-ggplot(stepsPerIntervalWeekday,aes(x=interval,y=steps))+geom_line()+xlab("steps per day during the week")
# Multiple plot function
#######################################################################################
#derived from: http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/#
#######################################################################################
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
###########################################################################################################
multiplot(plotWeekend,plotWeekday, cols=1)
